{"version":3,"sources":["components/Formulario.jsx","App.js","index.js"],"names":["Formulario","newCitas","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","actualizarCita","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","vale","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","titulo","length","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA8GeA,EA1GI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACXC,mBAAS,CAE/BC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KAPuB,mBAC5BC,EAD4B,KACtBC,EADsB,OAUTP,oBAAS,GAVA,mBAU5BQ,EAV4B,KAUrBC,EAVqB,KAY7BC,EAAiB,SAACC,GACtBJ,EAAQ,2BACHD,GADE,kBAEJK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAItBb,EAAgDK,EAAhDL,QAASC,EAAuCI,EAAvCJ,YAAaC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SA0B3C,OACE,kBAAC,WAAD,KACE,0CACEG,EAAQ,uBAAGO,UAAU,gBAAb,qCAEH,KACP,0BACEC,SA/Ba,SAAAL,GACjBA,EAAEM,iBAEqB,KAAnBhB,EAAQiB,QAAwC,KAAvBhB,EAAYgB,QAAkC,KAAjBf,EAAMe,QAC9C,KAAhBd,EAAKc,QACe,KAApBb,EAASa,QAKXT,GAAS,GAETH,EAAKa,GAAKC,MAEVrB,EAASO,GAETC,EAAQ,CACNN,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MAfVI,GAAS,KA2BP,oDACA,2BAAOY,KAAK,OACVR,KAAK,UACLE,UAAU,eACVO,YAAY,iBACZR,MAAQb,EACRsB,SAAWb,IAEb,kDACA,2BAAOW,KAAK,OACVR,KAAK,cACLE,UAAU,eACVO,YAAY,kBACZR,MAAQZ,EACRqB,SAAWb,IAEb,wCACA,2BAAOW,KAAK,OACVR,KAAK,QACLE,UAAU,eACVD,MAAQX,EACRoB,SAAWb,IAEb,uCACA,2BAAOW,KAAK,OACVR,KAAK,OACLE,UAAU,eACVD,MAAQV,EACRmB,SAAWb,IAEb,2CACA,8BACEG,KAAK,WACLE,UAAU,eACVS,KAAOnB,EACPkB,SAAWb,IAEb,4BACEW,KAAK,SACLN,UAAU,+BAFZ,mBCzCOU,MAnDf,WACE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAChDJ,IACHA,EAAiB,IAHN,MAMa1B,mBAAS0B,GANtB,mBAMNK,EANM,KAMCC,EAND,KAUbC,qBAAU,WACJP,EACFG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAE9C,CAACJ,EAAOL,IAEX,IAKMU,EAA0B,IAAjBL,EAAMM,OAAe,eAAiB,uBACrD,OACE,kBAAC,WAAD,KACE,0DACA,yBAAKtB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEhB,SAxBK,SAACO,GAChB0B,EAAS,GAAD,mBAAKD,GAAL,CAAYzB,SA0Bd,yBAAKS,UAAU,mBACb,4BAAMqB,GACJL,EAAMO,KAAI,SAAAhC,YClCxBiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a3816aab.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport uuid from 'react-uuid'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({ newCitas }) => {\r\n  const [cita, setCita] = useState({\r\n    // objeto con el estado inicial de los inputs\r\n    mascota: '',\r\n    propietario: '',\r\n    fecha: '',\r\n    hora: '',\r\n    sintomas: ''\r\n  })\r\n  // Error de validacion \r\n  const [error, setError] = useState(false)\r\n  // Funcion para actualizar el estado \r\n  const actualizarCita = (e) => {\r\n    setCita({\r\n      ...cita, // De esta forma hacemos una copia del objeto inicial \r\n      [e.target.name]: e.target.value // e = es el evento que recibe cada input, con e.target.name vemos en que campo estamos escribiendo y con e.target.value obtenemos el valor de mismo\r\n    })\r\n  }\r\n  // Destructuramos el objeto \r\n  const { mascota, propietario, fecha, hora, sintomas } = cita\r\n  // Funcion para enviar el formulario\r\n  const submitCita = e => {\r\n    e.preventDefault()\r\n    // validar \r\n    if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' ||\r\n      hora.trim() === '' ||\r\n      sintomas.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n    // Eliminar mensaje previo\r\n    setError(false)\r\n    // Asignar ID\r\n    cita.id = uuid()\r\n    // Crear Cita \r\n    newCitas(cita);\r\n    // Reset Formulario\r\n    setCita({\r\n      mascota: '',\r\n      propietario: '',\r\n      fecha: '',\r\n      hora: '',\r\n      sintomas: ''\r\n    })\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n      { error ? <p className='alerta-error'>\r\n        Todos los Campos Son Obligatorios\r\n      </p> : null }\r\n      <form\r\n        onSubmit={ submitCita }\r\n      >\r\n        <label>Nombre de Mascota</label>\r\n        <input type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          value={ mascota }\r\n          onChange={ actualizarCita } // funcion de las cuales se obtiene el valor del input\r\n        />\r\n        <label>Nombre Dueño</label>\r\n        <input type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Dueño\"\r\n          value={ propietario }\r\n          onChange={ actualizarCita }\r\n        />\r\n        <label>Fecha</label>\r\n        <input type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          value={ fecha }\r\n          onChange={ actualizarCita }\r\n        />\r\n        <label>Hora</label>\r\n        <input type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          value={ hora }\r\n          onChange={ actualizarCita }\r\n        />\r\n        <label>Sintomas</label>\r\n        <textarea\r\n          name=\"sintomas\"\r\n          className=\"u-full-width\"\r\n          vale={ sintomas }\r\n          onChange={ actualizarCita }\r\n        ></textarea>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"u-full-width button-primary\"\r\n        >\r\n          Agregar Cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nFormulario.propTypes = {\r\n  newCitas: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\nfunction App() {\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n  // useState para mostrar las citas\n  const [citas, setCitas] = useState(citasIniciales)\n  const newCitas = (cita) => { // funcion para almacenar las nuevas citas\n    setCitas([...citas, cita])\n  }\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  }, [citas, citasIniciales])\n\n  const eliminarCita = (id) => {\n    const arrayCitasE = citas.filter(cita => cita.id !== id);\n    setCitas(arrayCitasE)\n  }\n  // Mensaje Condicional\n  const titulo = citas.length === 0 ? 'No hay Citas' : 'Administra tus Citas'\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              newCitas={ newCitas }\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h1>{ titulo }</h1>\n            { citas.map(cita => ( // Recorremos las citas del useState\n              <Cita\n                key={ cita.id } // hay que asignarle unna key unica\n                cita={ cita } // pasamos como props todo el objeto\n                eliminarCita={ eliminarCita }\n              />\n            )) }\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}